{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAqCeA,EAlCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAkBzC,OACE,0BAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAOd,2BACEO,KAAK,OACLC,YAAY,iBACZC,MAAOV,EACPW,SArBc,SAACR,GACnBF,EAAcE,EAAES,OAAOF,Y,uBCLdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAGEI,MAAOF,GAHT,cAGfG,EAHe,gBAIEA,EAASC,OAJX,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAcdM,GAdc,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGtC,OACE,yBAAKc,UAAU,4CACb,yBAAKA,UAAU,aAAaC,IAAKf,EAAKgB,IAAKN,IAC3C,yBAAKI,UAAU,aACb,2BAAIJ,MCoBGO,EAzBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAbAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAM,SAAAC,GAELH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAKd,CAACpB,IAEGqB,EDlB2BK,CAAa1B,GAAjCa,EADkB,EACxBN,KAAca,EADU,EACVA,QAGtB,OACE,oCACE,4BAAKpB,GAGJoB,GAAW,wBAAIJ,UAAU,oCAAd,cAEZ,yBAAKA,UAAU,aAEXH,EAAOJ,KAAK,SAAAC,GAAG,OACb,kBAAC,EAAD,eACEiB,IAAKjB,EAAIC,IACLD,UEhBLkB,EAAe,WAAO,IAAD,EACI3C,mBAAS,CAAC,cADd,mBACzB4C,EADyB,KACb7C,EADa,KAShC,OACE,6BACE,4CACe,uBAAGgC,UAAU,sBAE5B,kBAAC,EAAD,CAAahC,cAAeA,IAC5B,6BAEA,4BAEI6C,EAAWpB,KAAI,SAAAT,GAAQ,OACrB,kBAAC,EAAD,CACE2B,IAAK3B,EACLA,SAAUA,U,MCrBxB8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.7e11db7f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      // esto inserta el ultimo en buscar y el resto al final\r\n      setCategories(cats => [inputValue, ...cats]);\r\n      setInputValue('');\r\n    }\r\n    \r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input \r\n        type=\"text\"\r\n        placeholder=\"...Search Gifs\"\r\n        value={inputValue}\r\n        onChange={handleInput}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n  // api.giphy.com/v1/gifs/search\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CyVrl4TbbMVhJLWVTvPTxt4PMnQg7Bfa`\r\n  const response = await fetch( url );\r\n  const { data } = await response.json();\r\n\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url // usa '?' para validar si viene el campo\r\n    }\r\n  })\r\n\r\n  return gifs;\r\n\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n  // const {id, title, url} = props;\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeInUp\">\r\n      <img className=\"card-image\" src={url} alt={title} />\r\n      <div className=\"container\">\r\n        <p>{title}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category); // El useEffect es llamado desde este Hook tambien\r\n\r\n  // Destructurar parametros: map(({id, title}) => ...\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n\r\n      {/* {loading ? <p>Loading</p> : null} */}\r\n      {loading && <h3 className=\"animate__animated animate__flash\">Loading...</h3>}\r\n\r\n      <div className=\"card-grid\">\r\n        { \r\n          images.map( img => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              {...img }\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  // Los useEffect no pueden ser Async\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then( imgs => {\r\n\r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n\r\n      })\r\n\r\n  }, [category])\r\n\r\n  return state; // {data: [], loading: true}\r\n\r\n  // // Se ejecuta cuando el componente es llamado\r\n  // useEffect(() => {\r\n  //   // getGifs retorna una promesa \r\n  //   getGifs(category)\r\n  //     .then(imgs => setImages(imgs));\r\n  //     // .then(setImages) es lo mismo\r\n  // }, [ category ]);\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['One punch']);\r\n\r\n  // const handleAdd = () => {\r\n  //   // de esta forma se agrega una nueva categoria sin cambiar el array a un string\r\n  //   // setCategories( [...categories, 'Hunter X Hunter'] ); \r\n  //   setCategories(cats => [...cats, 'Hunter X Hunter']);\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <h1>\r\n        GifExpertApp <i className=\"fab fa-angellist\" />\r\n      </h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        { \r\n          categories.map(category => (\r\n            <GifGrid \r\n              key={category}\r\n              category={category} \r\n            />\r\n          )) \r\n        }\r\n      </ol>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// GifExpertApp\n"],"sourceRoot":""}